"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[524],{1709:(i,s,a)=>{a.d(s,{l:()=>n});const n=JSON.parse('{"category":{"/":{"path":"/category/","map":{"图算法 -":{"path":"/category/%E5%9B%BE%E7%AE%97%E6%B3%95--/","indexes":[0]},"回溯算法 -":{"path":"/category/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95--/","indexes":[1]},"苹果":{"path":"/category/%E8%8B%B9%E6%9E%9C/","indexes":[2,3]}}}},"tag":{"/":{"path":"/tag/","map":{"dfs 图 并查集 dijkstra算法 Kurasal算法":{"path":"/tag/dfs-%E5%9B%BE-%E5%B9%B6%E6%9F%A5%E9%9B%86-dijkstra%E7%AE%97%E6%B3%95-kurasal%E7%AE%97%E6%B3%95/","indexes":[0]},"dfs 回溯":{"path":"/tag/dfs-%E5%9B%9E%E6%BA%AF/","indexes":[1]},"红":{"path":"/tag/%E7%BA%A2/","indexes":[2,3]},"大":{"path":"/tag/%E5%A4%A7/","indexes":[2,3]},"圆":{"path":"/tag/%E5%9C%86/","indexes":[2,3]}}}}}')},2878:(i,s,a)=>{a.d(s,{P:()=>n});const n={GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="vp-social-media-icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>'}},3429:(i,s,a)=>{a.d(s,{B:()=>Y});var n={};a.r(n),a.d(n,{default:()=>B});var e={};a.r(e);var t={};a.r(t);var l={};a.r(l);var h={};a.r(h),a.d(h,{default:()=>v});var p={};a.r(p),a.d(p,{default:()=>b});var k={};a.r(k);var r={};a.r(r);var d={};a.r(d),a.d(d,{default:()=>L});var o={};a.r(o),a.d(o,{default:()=>M});var c={};a.r(c),a.d(c,{default:()=>U});var A=a(5579);const B={enhance:({app:i})=>{i.component("GitContributors",A.B)}};var g=a(3349),y=a(1781),E=a(9212);const v={enhance:({app:i})=>{i.component("CodeTabs",y.S),i.component("Tabs",E.t)}};var m=a(2996),u=a(3027);const b={enhance:({app:i})=>{i.component("CodeDemo",m.A),i.component("MdDemo",u.A)}};var F=a(2417),C=a(355),f=a(457),D=a(4764),x=a(7786),w=a(641),j=a(307);const L={enhance:({app:i})=>{(0,D.L)("VPIcon")||i.component("VPIcon",(i=>(0,w.h)(j.G,{type:"iconify",prefix:"fa6-solid:",...i})))},setup:()=>{(0,x.r9V)("https://cdn.jsdelivr.net/npm/iconify-icon@2")}};var T=a(840),N=a(596),S=a(8831);a(2771);const M={enhance:({app:i})=>{(0,D.L)("Badge")||i.component("Badge",N.A),(0,D.L)("VPCard")||i.component("VPCard",S.A)},setup:()=>{},rootComponents:[]};var q=a(6358),z=a(3827),O=a(1599),P=a(4546),G=a(4128),J=a(1646),V=a(7238),$=a(8465),K=a(5091),H=a(1109),I=(a(2461),a(2472));a(7374),a(6829),a(6828),a(3248),(0,$.M_)((i=>{const s=i.title,a=i.index??!0,n=i.icon;return a?{title:s,content:n?()=>[(0,w.h)((0,w.g2)("VPIcon"),{icon:n,sizing:"both"}),s]:null,order:i.order,index:i.index}:null}));const U={enhance:({app:i,router:s})=>{const{scrollBehavior:a}=s.options;s.options.scrollBehavior=async(...i)=>(await G.s.wait(),a(...i)),(0,J.i)(i),i.component("BloggerInfo",K.n),i.component("SocialMedias",K.k),i.component("GlobalEncrypt",I.J),i.component("LocalEncrypt",I.n)},setup:()=>{(0,J.s)(),(0,J.a)(),(0,H.su)()},layouts:{Layout:V.L,NotFound:V.N,Blog:K.B}},Y=[n,e,t,l,g,h,p,k,r,F,C,f,d,T,o,q,z,O,P,c].map((i=>i.default)).filter(Boolean)},3781:(i,s,a)=>{a.d(s,{U:()=>n});const n=JSON.parse('{"article":{"/":{"path":"/article/","indexes":[4,5,6,0,1,2,3]}},"star":{"/":{"path":"/star/","indexes":[3]}},"timeline":{"/":{"path":"/timeline/","indexes":[4,5,6,0,1,2,3]}}}')},4776:(i,s,a)=>{a.d(s,{M:()=>n});const n=JSON.parse('["/algorithm/%E7%AE%97%E6%B3%95/graph.html","/algorithm/%E7%AE%97%E6%B3%95/traceback.html","/posts/%E6%9D%82%E8%B0%88/1.html","/posts/%E6%9D%82%E8%B0%88/2.html","/posts/%E6%9D%82%E8%B0%88/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98.html","/project/%E7%8B%AC%E7%AB%8B%E9%A1%B9%E7%9B%AE/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84.html","/intro.html"]')},4923:(i,s,a)=>{},6653:(i,s,a)=>{a.d(s,{K:()=>n});const n=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":{"tokens":["$2b$10$4yNgW0gu6GTcrD34lalQNeNMdPUwc3tYeNx7Y1rDX4eL2ZKlB84AO"],"hint":"Password: 1234"}}},"author":{"name":"scrazy_akai","url":"https://github.com/scrazyakai"},"logo":"https://theme-hope-assets.vuejs.press/logo.svg","repo":"scrazyakai/MyBlog","docsDir":"src","footer":"默认页脚","displayFooter":true,"blog":{"description":"一个后端开发者","intro":"/intro.html","medias":{"GitHub":"https://github.com/scrazyakai"}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","contributors":"贡献者","editLink":"在 GitHub 上编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routerLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家"},"navbar":["/",{"text":"算法","icon":"pen-to-square","link":"/algorithm/"},{"text":"独立项目","icon":"pen-to-square","link":"/project/"},{"text":"杂谈","icon":"pen-to-square","link":"/posts/"},{"text":"时间轴","icon":"time","link":"/timeline/"}],"sidebar":{"/":["",{"text":"算法系列","icon":"pen-to-square","prefix":"algorithm/","children":"structure"},{"text":"独立开发项目系列","icon":"pen-to-square","prefix":"project/","children":"structure"},{"text":"杂谈系列","icon":"pen-to-square","prefix":"posts/","children":"structure"}]}}}}')},8123:(i,s,a)=>{a.d(s,{v:()=>n});const n={"/algorithm/":[{text:"算法",prefix:"算法/",collapsible:!0,children:["traceback","graph"]}],"/project/":[{text:"独立项目",prefix:"独立项目/",collapsible:!0,children:["黑马点评"]}],"/posts/":[{text:"杂谈",prefix:"杂谈/",collapsible:!0,children:["1","2","记第一次部署前后端项目及遇到的问题"]}]}},8164:(i,s,a)=>{a.d(s,{J:()=>e,c:()=>n});const n=JSON.parse("{}"),e=Object.fromEntries([["/",{loader:()=>a.e(470).then(a.bind(a,9908)),meta:{title:"博客主页",icon:"house"}}],["/intro.html",{loader:()=>a.e(912).then(a.bind(a,5976)),meta:{date:1747211384e3,cover:"/assets/images/cover3.jpg",excerpt:"\n<p>你好呀(●'◡'●)</p>\n",readingTime:{minutes:.04,words:11},title:"介绍页",icon:"circle-info",type:"article"}}],["/algorithm/%E7%AE%97%E6%B3%95/graph.html",{loader:()=>a.e(785).then(a.bind(a,815)),meta:{date:1747211384e3,category:["图算法 -"],tag:["dfs 图 并查集 dijkstra算法 Kurasal算法"],excerpt:'\n<h2>1. 环检测法</h2>\n<h2>2. 拓扑排序（中序遍历然后再倒过来就是拓扑排序）</h2>\n<h2>3. 二分图</h2>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Solution</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 记录图是否符合二分图性质</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> ok </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 记录图中节点的颜色，false 和 true 代表两种不同颜色</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD"> boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] color</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 记录图中节点是否被访问过</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD"> boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] visited</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 主函数，输入邻接表，判断是否是二分图</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> isBipartite</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[][] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">graph</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> graph</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        color </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[n];</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        visited </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[n];</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // 因为图不一定是联通的，可能存在多个子图</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // 所以要把每个节点都作为起点进行一次遍历</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // 如果发现任何一个子图不是二分图，整幅图都不算二分图</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> v</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">; v </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> n; v++) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">visited[v]) {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                traverse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(graph, v);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ok;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // DFS 遍历框架</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> traverse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[][] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">graph</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> v</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        // 如果已经确定不是二分图了，就不用浪费时间再递归遍历了</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">ok) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        visited[v] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> w</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> graph[v]) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">visited[w]) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                // 相邻节点 w 没有被访问过</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                // 那么应该给节点 w 涂上和节点 v 不同的颜色</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                color[w] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> !</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">color[v];</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                // 继续遍历 w</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                traverse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(graph, w);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                // 相邻节点 w 已经被访问过</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                // 根据 v 和 w 的颜色判断是否是二分图</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (color[w] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> color[v]) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                    // 若相同，则此图不是二分图</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                    ok </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:5.81,words:1744},title:"图",icon:"pen-to-square",type:"article"}}],["/algorithm/%E7%AE%97%E6%B3%95/traceback.html",{loader:()=>a.e(79).then(a.bind(a,6779)),meta:{date:1747211384e3,category:["回溯算法 -"],tag:["dfs 回溯"],excerpt:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",readingTime:{minutes:.12,words:37},title:"回溯算法",icon:"pen-to-square",type:"article"}}],["/posts/%E6%9D%82%E8%B0%88/1.html",{loader:()=>a.e(290).then(a.bind(a,3520)),meta:{date:1747211384e3,category:["苹果"],tag:["红","大","圆"],excerpt:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",readingTime:{minutes:.11,words:34},title:"苹果 1",icon:"pen-to-square",type:"article"}}],["/posts/%E6%9D%82%E8%B0%88/2.html",{loader:()=>a.e(235).then(a.bind(a,5930)),meta:{date:1747211384e3,category:["苹果"],tag:["红","大","圆"],excerpt:"\n<p>一个被星标了的苹果文章。</p>\n",readingTime:{minutes:.16,words:48},title:"苹果 2",icon:"pen-to-square",type:"article"}}],["/posts/%E6%9D%82%E8%B0%88/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98.html",{loader:()=>a.e(176).then(a.bind(a,6275)),meta:{date:1752808118e3,excerpt:'\n<h2>前端部署(vercel)</h2>\n<h2>前端问题：前端未登录不能跳转到登陆界面</h2>\nvercel部署，需要加入vercel.json指定跳转\n<div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">  "rewrites"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: [</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">"source"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"/api/(.*)"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">"destination"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"https://api.findcompanions.xyz/api/$1"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> },</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">"source"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"/(.*)"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">"destination"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"/index.html"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  ]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',readingTime:{minutes:2.63,words:790},title:"记第一次部署前后端项目及遇到的问题",type:"article"}}],["/project/%E7%8B%AC%E7%AB%8B%E9%A1%B9%E7%9B%AE/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84.html",{loader:()=>a.e(103).then(a.bind(a,6826)),meta:{date:1747395226e3,excerpt:"\n<ul>\n<li>**string（字符串）: **基本的数据存储单元，可以存储字符串、整数或者浮点数。</li>\n<li>**hash（哈希）😗*一个键值对集合，可以存储多个字段。</li>\n<li>**list（列表）😗*一个简单的列表，可以存储一系列的字符串元素。</li>\n<li>**set（集合）😗*一个无序集合，可以存储不重复的字符串元素。</li>\n<li>**zset(sorted set：有序集合): **类似于集合，但是每个元素都有一个分数（score）与之关联。</li>\n</ul>\n<ol>\n<li>①字符串（String）</li>\n</ol>\n<ul>\n<li><code>SET key value</code>：设置键的值。</li>\n<li><code>GET key</code>：获取键的值。</li>\n<li><code>MSET:</code>批量添加多个String类型的键值对</li>\n<li><code>MGET</code>:根据key批量过去多个String类型的value</li>\n</ul>",readingTime:{minutes:23.64,words:7092},title:"黑马点评",type:"article"}}],["/404.html",{loader:()=>a.e(490).then(a.bind(a,1489)),meta:{title:""}}],["/algorithm/%E7%AE%97%E6%B3%95/",{loader:()=>a.e(705).then(a.bind(a,2776)),meta:{title:"算法"}}],["/algorithm/",{loader:()=>a.e(68).then(a.bind(a,966)),meta:{title:"Algorithm"}}],["/posts/%E6%9D%82%E8%B0%88/",{loader:()=>a.e(917).then(a.bind(a,748)),meta:{title:"杂谈"}}],["/posts/",{loader:()=>a.e(666).then(a.bind(a,8063)),meta:{title:"Posts"}}],["/project/%E7%8B%AC%E7%AB%8B%E9%A1%B9%E7%9B%AE/",{loader:()=>a.e(83).then(a.bind(a,140)),meta:{title:"独立项目"}}],["/project/",{loader:()=>a.e(112).then(a.bind(a,7872)),meta:{title:"Project"}}],["/category/",{loader:()=>a.e(583).then(a.bind(a,3233)),meta:{title:"分类",index:!1}}],["/category/%E5%9B%BE%E7%AE%97%E6%B3%95--/",{loader:()=>a.e(828).then(a.bind(a,5832)),meta:{title:"图算法 - 分类",index:!1}}],["/category/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95--/",{loader:()=>a.e(577).then(a.bind(a,4808)),meta:{title:"回溯算法 - 分类",index:!1}}],["/category/%E8%8B%B9%E6%9E%9C/",{loader:()=>a.e(793).then(a.bind(a,5568)),meta:{title:"苹果 分类",index:!1}}],["/tag/",{loader:()=>a.e(797).then(a.bind(a,951)),meta:{title:"标签",index:!1}}],["/tag/dfs-%E5%9B%BE-%E5%B9%B6%E6%9F%A5%E9%9B%86-dijkstra%E7%AE%97%E6%B3%95-kurasal%E7%AE%97%E6%B3%95/",{loader:()=>a.e(57).then(a.bind(a,523)),meta:{title:"标签: dfs 图 并查集 dijkstra算法 Kurasal算法",index:!1}}],["/tag/dfs-%E5%9B%9E%E6%BA%AF/",{loader:()=>a.e(455).then(a.bind(a,3943)),meta:{title:"标签: dfs 回溯",index:!1}}],["/tag/%E7%BA%A2/",{loader:()=>a.e(687).then(a.bind(a,1731)),meta:{title:"标签: 红",index:!1}}],["/tag/%E5%A4%A7/",{loader:()=>a.e(47).then(a.bind(a,6481)),meta:{title:"标签: 大",index:!1}}],["/tag/%E5%9C%86/",{loader:()=>a.e(48).then(a.bind(a,927)),meta:{title:"标签: 圆",index:!1}}],["/article/",{loader:()=>a.e(511).then(a.bind(a,2772)),meta:{title:"文章",index:!1}}],["/star/",{loader:()=>a.e(199).then(a.bind(a,353)),meta:{title:"星标",index:!1}}],["/timeline/",{loader:()=>a.e(464).then(a.bind(a,4695)),meta:{title:"时间轴",index:!1}}]])},8761:(i,s,a)=>{a.d(s,{U:()=>n});const n=JSON.parse('{"base":"/MyBlog/","lang":"zh-CN","title":"我的博客","description":"个人博客","head":[],"locales":{}}')}},i=>{i.O(0,[587,198],(()=>i(i.s=8731))),i.O()}]);